version: '3.8'

services:
  # Redis - Hot cache layer
  redis:
    image: redis:7-alpine
    container_name: baileys-redis
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes --requirepass baileys123
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # MongoDB - Cold storage layer
  mongodb:
    image: mongo:7
    container_name: baileys-mongodb
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: baileys
      MONGO_INITDB_ROOT_PASSWORD: baileys123
      MONGO_INITDB_DATABASE: whatsapp
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Kafka - Message queue for write-behind
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: baileys-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '2181']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: baileys-kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ['CMD', 'kafka-broker-api-versions', '--bootstrap-server', 'localhost:9092']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Commander - Web UI for Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: baileys-redis-commander
    depends_on:
      - redis
    ports:
      - '8081:8081'
    environment:
      REDIS_HOSTS: local:redis:6379:0:baileys123
    restart: unless-stopped

  # Mongo Express - Web UI for MongoDB
  mongo-express:
    image: mongo-express:latest
    container_name: baileys-mongo-express
    depends_on:
      - mongodb
    ports:
      - '8082:8081'
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: baileys
      ME_CONFIG_MONGODB_ADMINPASSWORD: baileys123
      ME_CONFIG_MONGODB_URL: mongodb://baileys:baileys123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    restart: unless-stopped

  # Kafka UI - Web UI for Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: baileys-kafka-ui
    depends_on:
      - kafka
    ports:
      - '8083:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local

networks:
  default:
    name: baileys-network
